<% provide(:title, "Flight Historian 2.3")%>
<% provide(:meta_description, "Flight Historian version 2.3 change log")%>

<h1>
  Flight Historian 2.3<br/>
  <small>Automatic Distance Calculations and GPX/KML Maps</small>
</h1>

<%= render(partial: "static_pages/flight_historian/version_picker", locals: {menu: @version_menu}) %>
<%= render(partial: "static_pages/flight_historian/version_summary", locals: @summary) if @summary %>

<p></p>

<%= link_header "Automatic Distance Calculations", 2 %>

<p>While a great deal of my flight entry work has been automated since <%= link_to "Version 2.1", flight_historian_path(version: "2-1") %>, one outstanding manual entry was the distance associated with a given route between two airports. <%= link_to("Flight Historian", "https://www.flighthistorian.com/", target: :_blank) %> would automatically add a new route to my Routes table the first time I flew it, but I’d have to manually go back in and add the distance via an Edit Route page.</p>

<p>I decided that it would be a good idea for me to add latitude and longitude fields to my Airport model, which would then allow me to calculate distances between airport pairs. Now, when I add a new airport, I use the <%= link_to("FlightXML API", "https://flightaware.com/commercial/flightxml/documentation2.rvt", target: :_blank) %> to lookup and store the airport’s coordinates in my database.</p>

<p>For the distance calculation itself, I used the <%= link_to "Haversine Formula", "https://en.wikipedia.org/wiki/Haversine_formula", target: :_blank %>. The Haversine formula isn’t quite perfect since the Earth is not quite a perfect sphere, but since flight distances are already an estimate (planes don’t perfectly follow the great circle line), the Haversine worst-case error of 0.5% was more than acceptable for this calculation. Thus, I decided against using Vincenty’s formulae, which are more accurate but also more computationally expensive.</p>

<%= link_header "GPX and KML Maps", 2 %>

<p>Flight Historian uses the <%= link_to("Great Circle Mapper", "http://www.gcmap.com/", target: :_blank) %> to generate its maps. However, I wanted to have the ability to create a map I could export.</p>

<p><%= link_to("GPX", "https://www.topografix.com/gpx.asp", target: :_blank) %> and <%= link_to("KML", "https://developers.google.com/kml/", target: :_blank) %> are both XML-based geographic data formats, which I’ve already used for my <%= link_to("GPS Logging", gps_logging_path) %> projects. They both have the ability to specify the coordinates of points and lines on a map, which is all I really need to create flight maps.</p>

<p>Generating the files was a relatively straightforward task. I already had a Map class which would accept airports, routes, and options, and create a querystring I could pass to the Great Circle Mapper. Generating this querystring already involved looping through the provided airports and routes to build a string with a specified format; I could use similar loops to generate an XML document in accordance with the GPX or KML specifications.</p>

<%= link_header "Change Log", 2 %>

<%= link_header "Front End", 3 %>

<ul>
  <li>Added latitudes and longitudes to airports</li>
  <li>Added <%= link_to("Terminal Silhouettes", terminal_silhouettes_path) %> to Show Airport views</li>
  <li>Added <%= link_to("layover ratio", "https://onehundredairports.com/2019/02/07/my-worst-layovers/", target: :_blank) %> to Show Trip Section views</li>
</ul>

<%= link_header "Back End", 3 %>

<ul>
  <li>Added <%= link_to("FlightXML API", "https://flightaware.com/commercial/flightxml/documentation2.rvt", target: :_blank) %> lookup for latitudes and longitudes when adding new airports</li>
  <li>Added ability to calculate route distances between two airports, using the haversine formula</li>
  <li>Updated Map class to convert airports to internally use airport IDs instead of IATA codes</li>
  <li>Renamed Map.draw to Map.gcmap</li>
  <li>Added Map.gpx and Map.kml methods</li>
</ul>